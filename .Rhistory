install.packages("ProjectTemplate")
library(ProjectTemplate)
create.project("../my_project", merge.strategy = "allow.non.conflict")
download.file("https://raw.githubusercontent.com/resbaz/r-novice-gapminder-files/master/data/gapminder-FiveYearData.csv", "data/gapminder-FiveYearData.csv")
?function_name
help (head)
?head
?"+"
c(1, 2, 3)
c('d', 'e', 'f')
c(1, 2, 'f')
help("paste")
?paste
dbl_var <- c(1, 2.5, 4.5)
int_var <- c(1L, 6L, 10L)
log_var <- c(TRUE, FALSE, T, F)
chr_var <- c("these are", "some strings")
a <- c("a", 1)
b <- c(TRUE, 1)
c <- c(1L, 10)
d <- c(a, b, c)
typeof(a); typeof(b); typeof(c); typeof(d)
x <- c(FALSE, FALSE, TRUE)
as.numeric(x)
sum(x)
mean(x)
x <- list(1:3, "a", c(TRUE, FALSE, TRUE), c(2.3, 5.9))
str(x)
type(1:3)
typeof(1:3)
x
str(x)
x <- list(list(list(list())))
str(x)
is.recursive(x)
x <- list(list(1, 2), c(3, 4))
y <- c(list(1, 2), c(3, 4))
str(x)
mtcars
typeof(mtcars)
is.list(mtcars)
mod <- lm(mpg ~ wt, data = mtcars)
mod
help("datasets")
library(help = "datasets")
c(1, FALSE)
c("a", 1)
typeof(c)
y <- c
typrof(c)
typeof(y)
y <- c(1, FALSE)
typeof(y)
z <- c("a", 1)
typeof(z)
e <- c(list(1), "a")
typeof(e)
f <- c(TRUE, 1L)
typeof(f)
is.vector(e)
is.numeric(f)
f
is.numeric(f)
is.character(y)
is.vector(e)
is.vector(e)
is.atomic(e)
is.numeric(e)
is.character(e)
is.complex(e)
is.double(e)
str(mtcar)
str(mtcars)
is.vector(mtcars)
is.list(mtcars)
is.data.frame(mtcars)
1 == "1"
-1 < FALSE
"one" < 2
"one" < 3
"one" < 4
"one" < 255
"one"  > 2
"one"  > 2555
x <- c(a = 1, b = 2, c = 3)
x
x+x
typeof(x)
name(x)
namesx
namesx
names(x)
names(x)
names(y)
names(y)
y <- setNames(x, c("a", "b", "c"))
names(y)
y <- c(a = 1, 2, 3)
names(y)
z <- c(1, 2, 3)
names(z)
x <- c("a", "b", "b", "a")
x
x <- factor(x)
x
class(x)
levels(x)
is.vector(x)
x[2] <- "b"
x[2] <- "c"
x
c(x, factor("b"))
class(c(x, factor("b")))
sex_char <- c("m", "m", "m")
sex_factor <- factor(sex_char, levels = c("m", "f"))
table(sex_char)
table(sex_factor)
a <- matrix(1:6, ncol = 3, nrow = 2)
b <- array(1:12, c(2, 3, 2))
a
b
c <- 1:12
dim(c) <- c(3, 4)
c
dim(c) <- c(4, 3)
c
dim(c) <- c(2, 3, 2)
c
str(1:3)
str(matrix(1:3, ncol = 1))
dim(str)
dim(x) <- c(2,2)
dim(x)
dim(c) <- c(2,2)
c
is.marix(x)
is.matrix(x)
is.array(x)
x1 <- array(1:5, c(1, 1, 5))
x1
is.atomic(e)
install.packages("LDheatmap")
install.packages("multic")
install.packages("phangorn")
install.packages("qtl")
install.packages("seqinr")
install.packages("wgaim")
install.packages("tm")
help("paste")
google <- read.csv("google_correlate.csv", header = T)
google <- read.csv("C:\\Users\\RuixiangLiu\\Desktop\\google_correlate.csv", header = T)
google <- read.csv("E:\\BCB546\\R\\Exercise Files\\Ch05\\05_03\\google_correlate.csv", header = T)
names(google)
pairs(~data_viz + degree + facebook + nba,
data = google,
pch = 20,
main = "Simple Scatterplot Matrix")
IF2_LW <- read.csv("IF2_LW_BLUP_VALUE", header = T)
IF2_LW <- read.csv("E:\\BCB546\\my_project\\data\\IF2_LW_BLUP_VALUE", header = T)
IF2_LW <- read.csv("E:\\BCB546\\my_project\\data\\IF2_LW_BLUP_VALUE.csv", header = T)
names(IF2_LW)
pairs(~L1W + L2W + L3W + L4W + L5W + L6W + L7W,
data = IF2_LW,
pch = 20,
main = "Simple Scatterplot Matrix")
library("psych")
install.packages("psych")
library("psych")
pairs.panels(IF2_LW[c(2, 3, 4, 5, 6, 7, 8)], gap = 0)
??pairs.panels()
pairs.panels(attitude)   #see the graphics window
data(iris)
pairs.panels(iris[1:4],bg=c("red","yellow","blue")[iris$Species],
pch=21,main="Fisher Iris data by Species") #to show color grouping
pairs.panels(iris[1:4],bg=c("red","yellow","blue")[iris$Species],
pch=21+as.numeric(iris$Species),main="Fisher Iris data by Species",hist.col="red")
#to show changing the diagonal
data(sat.act)
pairs.panels(sat.act,show.points=FALSE)
pairs.panels(sat.act,pch=".")
data(bfi)
pairs.panels(bfi,show.points=FALSE,gap=0)
sb <- statsBy(sat.act,"education")
pairs.panels(sb$mean,wt=sb$n)
pairs.panels(sb$mean)
browseVignettes(package = "psych")
pairs.panels(IF2_LW[c(2, 3, 4, 5, 6, 7, 8)], gap = 0, ellipses=FALSE)
pairs.panels(IF2_LW[c(2, 3, 4, 5, 6, 7, 8)], gap = 0)
pairs.panels(IF2_LW[c(2, 3, 4, 5, 6, 7, 8)], gap = 0, ellipses=FALSE, rug = FALSE)
pairs.panels(IF2_LW[c(2, 3, 4, 5, 6, 7, 8)], gap = 0, ellipses=FALSE, rug = FALSE, show.points = FALSE)
pairs.panels(IF2_LW[c(2, 3, 4, 5, 6, 7, 8)], gap = 0, ellipses=FALSE)
pairs.panels(IF2_LW[c(2, 3, 4, 5, 6, 7, 8)], gap = 0, ellipses=FALSE, hist.col = "gray")
pairs.panels(IF2_LW[c(2, 3, 4, 5, 6, 7, 8)], gap = 0, ellipses=FALSE, treering)
pairs.panels(IF2_LW[c(2, 3, 4, 5, 6, 7, 8)], gap = 0, ellipses=FALSE, lm = FALSE)
pairs.panels(IF2_LW[c(2, 3, 4, 5, 6, 7, 8)], gap = 0, ellipses=FALSE, lm = TRUE)
pairs.panels(IF2_LW[c(2, 3, 4, 5, 6, 7, 8)], gap = 0, ellipses=FALSE, cor = TRUE)
pairs.panels(IF2_LW[c(2, 3, 4, 5, 6, 7, 8)], gap = 0, ellipses=FALSE, density= TRUE)
pairs.panels(IF2_LW[c(2, 3, 4, 5, 6, 7, 8)], gap = 0, ellipses=FALSE, density= FALSE)
pairs.panels(IF2_LW[c(2, 3, 4, 5, 6, 7, 8)], gap = 0, ellipses=FALSE, density= TRUE)
pairs.panels(IF2_LW[c(2, 3, 4, 5, 6, 7, 8)], gap = 0, ellipses=FALSE, density= TRUE, cor= FALSE)
pairs.panels(IF2_LW[c(2, 3, 4, 5, 6, 7, 8)], gap = 0, ellipses=FALSE, density= TRUE, cor= FALSE, hist.col= "red")
pairs.panels(IF2_LW[c(2, 3, 4, 5, 6, 7, 8)], gap = 0, ellipses=FALSE, density= TRUE, cor= FALSE, hist.col= "red", hist.default(xlim = 0.5))
pairs.panels(IF2_LW[c(2, 3, 4, 5, 6, 7, 8)], gap = 0, ellipses=FALSE, density= TRUE, cor= FALSE, hist.col= "red", hist(0.5))
pairs.panels(IF2_LW[c(2, 3, 4, 5, 6, 7, 8)], gap = 0, ellipses=FALSE, density= TRUE, cor= FALSE, hist.col= "red", hist.default()
pairs.panels(IF2_LW[c(2, 3, 4, 5, 6, 7, 8)], gap = 0, ellipses=FALSE, density= TRUE, cor= FALSE, hist.col= "red", hist.default())
pairs.panels(IF2_LW[c(2, 3, 4, 5, 6, 7, 8)], gap = 0, ellipses=FALSE, density= TRUE, cor= FALSE, hist.col= "red")
pairs(IF2_LW[c(2, 3, 4, 5, 6, 7, 8)], gap = 0, ellipses=FALSE, density= TRUE, cor= FALSE, hist.col= "red")
pairs.default(IF2_LW[c(2, 3, 4, 5, 6, 7, 8)], gap = 0, ellipses=FALSE, density= TRUE, cor= FALSE, hist.col= "red")
pairs.panels(IF2_LW[c(2, 3, 4, 5, 6, 7, 8)], gap = 0, ellipses=FALSE, density= TRUE, cor= FALSE, hist.col= "red")
IF2.quant <- IF2_LW[c(2, 3, 4, 5, 6, 7, 8)]
cor(IF2.quant)
cortest(IF2.quant$L1W, IF2.quant$L2W)
cor.test(IF2.quant$L1W, IF2.quant$L2W)
library("Hmisc")
install.packages("Hmisc")
rcorr(as.matrix(IF2.quant))
library("Hmisc")
library("Hmisc")
install.packages("Hmisc")
library("Hmisc")
library("Hmisc")
rcorr(as.matrix(IF2.quant))
RIL_LW <- read.csv("E:\\BCB546\\my_project\\data\\RIL_LW_BLUP_VALUE.csv", header = T)  # load the data
names(RIL_LW)
pairs.panels(RIL_LW[c(2, 3, 4, 5, 6, 7, 8)], gap = 0, ellipses=FALSE, density= TRUE, cor= FALSE, hist.col= "red")
install.packages("propr")
x <- c(5.4, 6.2, 7.1, 4.8, 7.5)
names(x) <- c('a', 'b', 'c', 'd', 'e')
x
x[1]
x[4]
x[c(1, 3)]
x[1:4]
x[c(1,1,3)]
x[6]
x[0]
x[-2]
x[c(-1, -5)]
x[-1:3]
x[-(1:3)]
x <- x[-4]
x
x <- c(5.4, 6.2, 7.1, 4.8, 7.5)
names(x) <- c('a', 'b', 'c', 'd', 'e')
print(x)
x[2,3,4]
x[2:4]
x[2:4]
x[2, 3, 4]
x[c(2, 3, 4)]
x[-c(1, 5)]
x[c(2:4)]
x[c("a", "c")]
x
x[c("a", "c")]
x
x <- c(5.4, 6.2, 7.1, 4.8, 7.5)
names(x) <- c('a', 'b', 'c', 'd', 'e')
x[c("a", "c")]
x
x
x[c("a", "c")]
x
x[-which(names(x) == "a")]
names(x) == "a"
which(names(x) == "a")
x[-which(names(x) %in% c("a", "c"))]
x <- c(5.4, 6.2, 7.1, 4.8, 7.5)
names(x) <- c('a', 'b', 'c', 'd', 'e')
print(x)
x[-which(names(x) == "g")]
names(x) == "g"
which(names(x) == "g")
which(names(x) == "g"
which(names(x) == "g")
which(names(x) == "g")
x <- 1:3
x
names(x) <- c('a', 'a', 'a')
x
x['a']
x[which(names(x) == 'a')]
x[c(TRUE, TRUE, FALSE, FALSE)]
x[c(TRUE, FALSE)]
x <- c(5.4, 6.2, 7.1, 4.8, 7.5)
x > 6
x[x > 6]
x[x > 6 & x < 7.2]
x <- c(5.4, 6.2, 7.1, 4.8, 7.5)
names(x) <- c('a', 'b', 'c', 'd', 'e')
print(x)
x[x > 4 & x < 6]
x[x < 7 & x > 4]
x_subset <- x[x<7 & x>4]
print(x_subset)
cats <- data.frame(coat = c("calico", "black", "tabby"), weight = c(2.1, 5.0, 3.2), likes_string = c(1, 0, 1))
str(cats)
typeof(cats)
class(cats)
is.data.frame(cats)
cats <- read.csv(file = "data/cats.csv")
cats
cats$weight
cats$coat
cats$weight + 2
paste("My cat is", cats$coat)
paste("My cat$weight
typeof(cats$weight)
typeof(cats$weight)
cats[1]
paste("My cat is", cats$coat)
typeof(cats$weight)
cats[1]
cats[[1]]
typeof(cats[1])
typeof(cats[[1]])
typeof(cats$coat)
cats[[1:2]]
cats[[-1]]
cats[[1]]
cats[-[1]]
cats[[-2]]
cats[-1]
d[["coat"]]
d["coat"]
cats$coat
cats[1:3,]
cats[3,]
cats[,3]
cats[1,3]
cats[1, 3]
cats[, 1]
age <- c(2,3,5,12)
cats
cats <- cbind(cats, age)
age <- c(4,5,8)
cats <- cbind(cats, age)
cats
cats
levels(cats$coat)
levels(cats$coat) <- c(levels(cats$coat, 'tortoiseshell'))
levels(cats$coat) <- c(levels(cats$coat), 'tortoiseshell')
cats <- rbind(cats, list("tortoiseshell", 3.3, TRUE, 9))
str(cats)
perinfo <- data.frame(infor = c("first_name", "last_name", "lucky_number"), ruxiang = ("ruixiang", "liu", 6))
perinfo <- data.frame(infor = c("first_name", "last_name", "lucky_number"), ruxiang = c("ruixiang", "liu", 6))
perinfo
perinfo <- rbind(perinfo, list("hao", "zhang", 8))
perinfo
perinfo <- data.frame(first = c("ruixiang")), last = c("liu"), lucky_number = c(6))
perinfo <- data.frame(first = c("ruixiang"), last = c("liu"), lucky_number = c(6))
perinfo
perinfo <- rbind(perinfo, list("hao", "zhang", 8))
perinfo
perinfo <- rbind(perinfo, list('hao', "zhang", 8))
perinfo <- rbind(perinfo, list('hao', 'zhang', 8))
perinfo
perinfo <- -c(4)
perinfo
perinfo <- data.frame(infor = c("first_name", "last_name", "lucky_number"), ruxiang = c("ruixiang", "liu", 6))
perinfo
perinfo <- data.frame(first = c("ruixiang"), last = c("liu"), lucky_number = c(6))
perinfo
perinfo <- rbind(perinfo, list('hao', 'zhang', 8))
df <- data.frame(first = c('Grace'),
last = c('Hopper'),
lucky_number = c(0),
stringsAsFactors = FALSE)
df <- rbind(df, list('Marie', 'Curie', 238) )
df
perinfo <- data.frame(first = c("ruixiang"), last = c("liu"), lucky_number = c(6))
perinfo
perinfo <- rbind(perinfo, list('hao', 'zhang', 8))
perinfo <- rbind(perinfo, list("hao", "zhang", 8))
perinfo <- data.frame(first = c('ruixiang'), last = c('liu'), lucky_number = c(6))
perinfo
perinfo <- rbind(perinfo, list('hao', 'zhang', 8))
perinfo
perinfo <- data.frame(first = c('ruixiang'), last = c('liu'), lucky_number = c(6))
perinfo
perinfo <- rbind(perinfo, list('Marie', 'Curie', 238) )
perinfo
perinfo <- data.frame(first = c('ruixiang'), last = c('liu'), lucky_number = c(6), stringsAsFactors = FALSE)
perinfo <- rbind(perinfo, list('hao', 'zhang', 8))
perinfo
perinfo <- data.frame(first = c("ruixiang"),
last = c("liu"),
lucky_number = c(6),
stringsAsFactors = FALSE)
perinfo <- rbind(perinfo, list('hao', 'zhang', 8))
perinfo
age <- c(2,3,5,12)
cats
levels(cats$coat)
str(cats)
cats$coat <- as.character(cats$coat)
str(cats$coat)
source('E:/BCB546/my_project/week-06.R', echo=TRUE)
str(cats)
cats
newRow <- list("tortoiseshell", 3.3, TRUE, 9)
cats <- rbind(cats, newRow)
cats
cats[-4,]
cats[c(-4, -5), ]
perinfo
cats <- rbind(cats, list('NA', 4, 1, 6))
cats
na.omit(cats)
cats
cats <- rbind(cats, list('<NA>', 4, 1, 6))
cats
na.omit(cats)
cats
cats <- cats[(-5, -6, -7), ]
cats <- cats[c(-5, -6, -7), ]
cats
？c
?c
cats <- rbind(cats, cats)
cats
rownames(cats)
rownames(cats) <- NULL
rownames(cats)
cats
perinfo
perinfo <- cbind(perinfo, coffeetime = c(TRUE, TRUE))
perinfo
perinfo <- cbind(perinfo, dinertime = c(FALSE,FALSE))
perinfo
cats
cats[c(1,3)]
cats[,c(1,3)]
cats[c(1,3),]
cats[,c(1,3)]
write.csv(cats, file = "data/new_cats.csv")
download.file("https://raw.githubusercontent.com/vsbuffalo/bds-files/master/chapter-08-r/Dataset_S1.txt", destfile = "data/Dataset_S1.txt")
d <- read.csv("data/Dataset_S1.txt")
d
str(d)
head(d, n=3)
nrow(d)
ncol(d)
dim(d)
colnames(d)
colnames(d)[12]
colnames(d)[12] <- "percent.GC"
str(d)
mean(d$depth)
summary(d$depth)
d[,1:2]
d[, c("start", "end")]
d[1, c("start", "end")]
d[1,]
d[2, 3]
d[, "start", drop=FALSE]
d$cent <- d$start >= 25800000 & d$end <= 29700000
head(d$cent)
table(d$cent)
d$diversity <- d$Pi / (10*1000) # rescale, removing 10x and making per bp
summary(d$diversity)
table(d$diversity)
summary(d$total.SNPs)
d$total.SNPs >= 85
d[d$total.SNPs >= 85, ]
d[d$total.SNPs >= 85, ]
d[d$Pi > 16 & d$percent.GC > 80, ]
d[d$Pi > 16 & d$percent.GC > 80, c(2, 5) ]
d[d$Pi > 16 & d$percent.GC > 80, c(5, 8) ]
d$percent.GC[d$Pi > 16]
summary(d$depth[d$percent.GC >= 80])
d$depth[d$percent.GC >= 80
d[d$total.SNPs >= 85]
summary(d$depth[d$percent.GC < 80])
sum(d$percent.GC >= 80)
summary(d$Pi[d$cent = FALSE])
summary(d$Pi[d$cent = FALSE],)
summary(d$Pi[d$cent])
summary(d$Pi[!d$cent])
summary(d$Pi[d$cent = "1"])
summary(d$Pi[d$cent = "TRUE"])
summary(d$Pi[d$cent == TRUE])
d$Pi>3
which(d$Pi > 3)
which(d$Pi > 10)[1:4]
which(!d$Pi > 3)
d[which.min(d$total.Bases),]
d[which.max(d$depth),]
subset(d, Pi > 16 & percent.GC > 80)
subset(d, Pi > 16 & percent.GC > 80, c(start, end, Pi, percent.GC, depth))
download.file("https://raw.githubusercontent.com/vsbuffalo/bds-files/master/chapter-08-r/chrX_rmsk.txt.gz", destfile = "data/chrX_rmsk.txt.gz")
reps <- read.delim("data/chrX_rmsk.txt.gz")
head(reps, 3)
str(reps)
head(reps, 3)
